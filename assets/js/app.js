// Generated by CoffeeScript 1.3.3
(function() {
  var Controller, Train, TrainCollection, mainView, start, trainItem, trainList,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  start = function() {
    var hash, router;
    router = new Controller;
    Backbone.history.start({});
    hash = Backbone.history.getHash();
    if (hash === "") {
      router.navigate('trains/from/EYO/to/PAZ', {
        trigger: true
      });
      return console.debug("change the fragment  of " + hash);
    } else {
      return console.debug("Already a fragment of " + hash);
    }
  };

  $(document).ready(start);

  Controller = (function(_super) {

    __extends(Controller, _super);

    function Controller() {
      return Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.prototype.initialize = function() {
      return this.view = new mainView;
    };

    Controller.prototype.routes = {
      'trains/from/:from/to/:to': 'trainsFromTo'
    };

    Controller.prototype.trainsFromTo = function(from, to) {
      from = from.toUpperCase();
      to = to.toUpperCase();
      console.debug('start');
      if (this.trains !== void 0) {
        this.trains.stop();
      }
      this.trains = new TrainCollection(null, {
        from: from,
        to: to
      });
      this.view.trainList.setTrainList(this.trains);
      this.view.trainList.refresh();
      this.trains.start();
      return console.dir(this.trains);
    };

    return Controller;

  })(Backbone.Router);

  Train = (function(_super) {

    __extends(Train, _super);

    function Train() {
      return Train.__super__.constructor.apply(this, arguments);
    }

    Train.prototype.defaults = {
      name: "name",
      mission: "Mission code",
      date: "dateTimeObject",
      lane: "plateform"
    };

    return Train;

  })(Backbone.Model);

  TrainCollection = (function(_super) {

    __extends(TrainCollection, _super);

    function TrainCollection() {
      this.updateTrainList = __bind(this.updateTrainList, this);

      this.stop = __bind(this.stop, this);

      this.start = __bind(this.start, this);

      this.cleanup = __bind(this.cleanup, this);

      this.parse = __bind(this.parse, this);

      this.url = __bind(this.url, this);
      return TrainCollection.__super__.constructor.apply(this, arguments);
    }

    TrainCollection.prototype.model = Train;

    TrainCollection.prototype.initialize = function(n, options) {
      console.debug('initialize collection');
      if (options !== void 0) {
        this.from = options.from;
      }
      if (options !== void 0) {
        return this.to = options.to;
      }
    };

    TrainCollection.prototype.url = function() {
      return "https://www.riper.fr/api/stif/trains/from/" + this.from + "/to/" + this.to;
    };

    TrainCollection.prototype.parse = function(response, xhr) {
      if (xhr.status === 200 && response.status === true) {
        return response.response;
      } else {
        console.debug('Error in response from server with parameters ' + ("" + this.from + "/" + this.to));
        return [];
      }
    };

    TrainCollection.prototype.cleanup = function(ids) {
      var _this = this;
      console.debug("cleanup");
      console.debug(this.models.length);
      return this.each(function(train) {
        console.dir(_.indexOf(ids, train.get('id')));
        if (_.indexOf(ids, train.get('id')) === -1) {
          console.debug("Train is outdated " + (train.get('trainMissionCode')));
          return _this.remove(train);
        }
      });
    };

    TrainCollection.prototype.start = function() {
      if (this.timer) {
        clearInterval(this.timer);
      }
      this.updateTrainList();
      return this.timer = setInterval(this.updateTrainList, 2000);
    };

    TrainCollection.prototype.stop = function() {
      if (this.timer) {
        return clearInterval(this.timer);
      }
    };

    TrainCollection.prototype.updateTrainList = function() {
      var _this = this;
      if (this.working !== true) {
        this.working = true;
        return this.fetch({
          add: true,
          success: function(n, response) {
            var ids;
            _this.working = false;
            ids = _.pluck(response.response, 'id');
            return _this.cleanup(ids);
          },
          error: function(n, reponse) {
            return _this.working = false;
          }
        });
      }
    };

    return TrainCollection;

  })(Backbone.Collection);

  mainView = (function(_super) {

    __extends(mainView, _super);

    function mainView() {
      return mainView.__super__.constructor.apply(this, arguments);
    }

    mainView.prototype.el = $('body');

    mainView.prototype.initialize = function() {
      _.bindAll(this);
      return this.render();
    };

    mainView.prototype.render = function() {
      this.trainList = new trainList;
      return $(this.el).append(this.trainList.el);
    };

    return mainView;

  })(Backbone.View);

  trainItem = (function(_super) {

    __extends(trainItem, _super);

    function trainItem() {
      this.render = __bind(this.render, this);
      return trainItem.__super__.constructor.apply(this, arguments);
    }

    trainItem.prototype.model = Train;

    trainItem.prototype.nodeName = 'li';

    trainItem.prototype.template = _.template("Template Item Train {{trainMissionCode}} of {{trainHour}}");

    trainItem.prototype.initialize = function() {
      this.model.bind("change", this.render);
      return this.render();
    };

    trainItem.prototype.render = function() {
      console.debug("Render train named " + (this.model.get('trainMissionCode')) + " at " + (new Date().toString()));
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return trainItem;

  })(Backbone.View);

  trainList = (function(_super) {

    __extends(trainList, _super);

    function trainList() {
      this.removeTrain = __bind(this.removeTrain, this);

      this.appendTrain = __bind(this.appendTrain, this);

      this.refresh = __bind(this.refresh, this);
      return trainList.__super__.constructor.apply(this, arguments);
    }

    trainList.prototype.initialize = function() {
      _.bindAll(this);
      this.counter = 0;
      return this.render();
    };

    trainList.prototype.render = function() {
      var _this = this;
      $(this.el).append('<ul></ul>');
      if (this.trainList) {
        return this.trainList.each(function(Train) {
          return _this.appendTrain(Train, _this.trainList);
        });
      } else {
        return console.debug("no trainList collection");
      }
    };

    trainList.prototype.refresh = function() {
      console.debug('reset view');
      $(this.el).html('');
      return this.render();
    };

    trainList.prototype.setTrainList = function(collection) {
      if (this.trainList) {
        this.trainList.unbind('add', this.appendTrain);
      }
      if (this.trainList) {
        this.trainList.unbind('remove', this.removeTrain);
      }
      if (this.trainList) {
        this.trainList.unbind('reset', this.refresh);
      }
      this.trainList = collection;
      this.trainList.bind('add', this.appendTrain);
      this.trainList.bind('remove', this.removeTrain);
      return this.trainList.bind('reset', this.refresh);
    };

    trainList.prototype.appendTrain = function(Train, collection) {
      if (Train.view === void 0) {
        Train.view = new trainItem({
          model: Train
        });
      }
      return $(this.el).find('ul').first().append(Train.view.el);
    };

    trainList.prototype.removeTrain = function(Train, collection) {
      return Train.view.remove();
    };

    return trainList;

  })(Backbone.View);

  trainList = (function(_super) {

    __extends(trainList, _super);

    function trainList() {
      this.removeTrain = __bind(this.removeTrain, this);

      this.appendTrain = __bind(this.appendTrain, this);

      this.refresh = __bind(this.refresh, this);
      return trainList.__super__.constructor.apply(this, arguments);
    }

    trainList.prototype.initialize = function() {
      _.bindAll(this);
      this.counter = 0;
      return this.render();
    };

    trainList.prototype.render = function() {
      var _this = this;
      $(this.el).append('<ul></ul>');
      if (this.trainList) {
        return this.trainList.each(function(Train) {
          return _this.appendTrain(Train, _this.trainList);
        });
      } else {
        return console.debug("no trainList collection");
      }
    };

    trainList.prototype.refresh = function() {
      console.debug('reset view');
      $(this.el).html('');
      return this.render();
    };

    trainList.prototype.setTrainList = function(collection) {
      if (this.trainList) {
        this.trainList.unbind('add', this.appendTrain);
      }
      if (this.trainList) {
        this.trainList.unbind('remove', this.removeTrain);
      }
      if (this.trainList) {
        this.trainList.unbind('reset', this.refresh);
      }
      this.trainList = collection;
      this.trainList.bind('add', this.appendTrain);
      this.trainList.bind('remove', this.removeTrain);
      return this.trainList.bind('reset', this.refresh);
    };

    trainList.prototype.appendTrain = function(Train, collection) {
      if (Train.view === void 0) {
        Train.view = new trainItem({
          model: Train
        });
      }
      return $(this.el).find('ul').first().append(Train.view.el);
    };

    trainList.prototype.removeTrain = function(Train, collection) {
      return Train.view.remove();
    };

    return trainList;

  })(Backbone.View);

}).call(this);
