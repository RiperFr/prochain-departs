// Generated by CoffeeScript 1.3.3
(function() {
  var Configuration, Controller, DigitalClock, REGISTER, Station, StationsCollection, Train, TrainCollection, bb, emptyList, init, mainView, pause, resume, selector, serviceContainers, start, stop, trainItem, trainList, zlog,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  bb = (function(_super) {

    __extends(bb, _super);

    function bb() {
      return bb.__super__.constructor.apply(this, arguments);
    }

    return bb;

  })(Backbone);

  bb.Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      this.navigate = __bind(this.navigate, this);
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.navigate = function(str, options) {
      if (options === void 0) {
        options = {};
      }
      options.trigger = true;
      return Backbone.Router.prototype.navigate.call(this, str, options);
    };

    return Router;

  })(Backbone.Router);

  bb.history = Backbone.history;

  REGISTER = {};

  init = function() {
    var hash;
    REGISTER.router = new Controller;
    Backbone.history.start({
      pushState: true,
      sessionStorage: true,
      root: window.location.pathname
    });
    hash = Backbone.history.getHash();
    if (hash === "") {

    } else {

    }
    return REGISTER.router.resume();
  };

  start = function() {
    return REGISTER.router.startTimer();
  };

  stop = function() {
    return REGISTER.router.stopTimer();
  };

  pause = function() {
    return REGISTER.router.stopTimer();
  };

  resume = function() {
    return REGISTER.router.startTimer();
  };

  $(document).ready(function() {
    init();
    return start();
  });

  Controller = (function(_super) {

    __extends(Controller, _super);

    function Controller() {
      this.emptySelection = __bind(this.emptySelection, this);

      this.trainsFrom = __bind(this.trainsFrom, this);

      this.trainsFromTo = __bind(this.trainsFromTo, this);

      this._updateTimerRefs = __bind(this._updateTimerRefs, this);

      this.stopTimer = __bind(this.stopTimer, this);

      this.startTimer = __bind(this.startTimer, this);

      this.saveConfig = __bind(this.saveConfig, this);

      this.resume = __bind(this.resume, this);
      return Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.prototype.initialize = function() {
      if (localStorage.configuration) {
        this.config = new Configuration(localStorage.configuration);
      } else {
        this.config = new Configuration();
      }
      this.config.bind('change', this.saveConfig);
      return this.view = new mainView({
        config: this.config
      });
    };

    Controller.prototype.resume = function() {
      if (localStorage.from) {
        if (localStorage.to) {
          this.navigate("trains/from/" + localStorage.from + "/to/" + localStorage.to);
        } else {
          this.navigate("trains/from/" + localStorage.from);
        }
      }
      return this.resumed = true;
    };

    Controller.prototype.saveConfig = function() {
      return localStorage.configuration = this.config.toJSON();
    };

    Controller.prototype.startTimer = function() {
      if (!(this.trains === void 0 || null)) {
        this.trains.stop();
      }
      if (!(this.trains === void 0 || null)) {
        this.trains.start();
      }
      return this.timerStatus = true;
    };

    Controller.prototype.stopTimer = function() {
      if (!(this.trains === void 0 || null)) {
        this.trains.stop();
      }
      return this.timerStatus = false;
    };

    Controller.prototype._updateTimerRefs = function(trains) {
      if (this.timerStatus === true) {
        this.stopTimer();
        this.trains = trains;
      } else {
        this.trains = trains;
      }
      return this.startTimer();
    };

    Controller.prototype.routes = {
      '': 'emptySelection',
      'trains/from/:from/to/:to': 'trainsFromTo',
      'trains/from/:from': 'trainsFrom'
    };

    Controller.prototype.trainsFromTo = function(from, to) {
      var trains;
      from = from.toUpperCase();
      to = to.toUpperCase();
      this.stopTimer();
      trains = new TrainCollection(null, {
        from: from,
        to: to
      });
      this.view.trainList.setTrainList(trains);
      this.view.selector.setTrainFromTo(from, to);
      this.view.trainList.refresh();
      this._updateTimerRefs(trains);
      if (!!this.resumed) {
        localStorage.from = from;
      }
      if (!!this.resumed) {
        return localStorage.to = to;
      }
    };

    Controller.prototype.trainsFrom = function(from) {
      var trains;
      from = from.toUpperCase();
      this.stopTimer();
      trains = new TrainCollection(null, {
        from: from
      });
      this.view.trainList.setTrainList(trains);
      this.view.selector.setTrainFrom(from);
      this.view.trainList.refresh();
      this._updateTimerRefs(trains);
      if (!!this.resumed) {
        localStorage.from = from;
      }
      if (!!this.resumed) {
        return localStorage.to = null;
      }
    };

    Controller.prototype.emptySelection = function() {
      this.view.trainList.setTrainList();
      this.view.trainList.refresh();
      if (!!this.resumed) {
        localStorage.from = null;
      }
      if (!!this.resumed) {
        return localStorage.to = null;
      }
    };

    return Controller;

  })(bb.Router);

  serviceContainers = (function() {

    function serviceContainers() {
      this.get = __bind(this.get, this);

      this.register = __bind(this.register, this);

    }

    serviceContainers.prototype.services = {};

    serviceContainers.prototype.instances = {};

    serviceContainers.prototype.register = function(name, constructor) {
      ({
        service: {
          name: name,
          constructor: constructor
        }
      });
      return this.services[name] = service;
    };

    serviceContainers.prototype.get = function(name) {
      var instance;
      if (!this.instances[name]) {
        instance = new this.services[name].constructor();
      }
      return this.instances[name];
    };

    return serviceContainers;

  })();

  zlog = (function() {

    function zlog() {}

    zlog.prototype.enabled = true;

    zlog.prototype.enable = function() {
      return this.enabled = true;
    };

    zlog.prototype.disable = function() {
      return this.enabled = false;
    };

    zlog.prototype.debug = function(text) {};

    zlog.prototype.dir = function(obj) {};

    return zlog;

  })();

  Configuration = (function(_super) {

    __extends(Configuration, _super);

    function Configuration() {
      this.updateSettigns = __bind(this.updateSettigns, this);

      this.initialize = __bind(this.initialize, this);
      return Configuration.__super__.constructor.apply(this, arguments);
    }

    Configuration.prototype.defaults = {
      theme: 'dark',
      displayClock: true,
      animate: true
    };

    Configuration.prototype.themeList = ['dark', 'light'];

    Configuration.prototype.initialize = function() {
      this.bind('change', this.updateSettigns);
      return this.updateSettigns();
    };

    Configuration.prototype.updateSettigns = function() {
      var theme, _i, _len, _ref;
      _ref = this.themeList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        theme = _ref[_i];
        $('body').removeClass(theme);
      }
      return $('body').addClass(this.get('theme'));
    };

    return Configuration;

  })(bb.Model);

  Station = (function(_super) {

    __extends(Station, _super);

    function Station() {
      return Station.__super__.constructor.apply(this, arguments);
    }

    Station.prototype.defaults = {
      code: "code",
      name: "name",
      location: {}
    };

    return Station;

  })(bb.Model);

  StationsCollection = (function(_super) {

    __extends(StationsCollection, _super);

    function StationsCollection() {
      this.comparator = __bind(this.comparator, this);

      this.parse = __bind(this.parse, this);

      this.url = __bind(this.url, this);
      return StationsCollection.__super__.constructor.apply(this, arguments);
    }

    StationsCollection.prototype.model = Station;

    StationsCollection.prototype.initialize = function(n, options) {};

    StationsCollection.prototype.url = function() {
      return "https://www.riper.fr/api/stif/stations";
    };

    StationsCollection.prototype.parse = function(response, xhr) {
      if (xhr.status === 200 && response.status === true) {
        return response.response;
      } else {
        return [];
      }
    };

    StationsCollection.prototype.comparator = function(Station1, Station2) {
      if (Station1.get('name') === Station2.get('name')) {
        return 0;
      }
      if (Station1.get('name') > Station2.get('name')) {
        return 1;
      } else {
        return -1;
      }
    };

    return StationsCollection;

  })(Backbone.Collection);

  Train = (function(_super) {

    __extends(Train, _super);

    function Train() {
      return Train.__super__.constructor.apply(this, arguments);
    }

    Train.prototype.defaults = {
      name: "name",
      mission: "Mission code",
      date: "dateTimeObject",
      lane: "plateform"
    };

    return Train;

  })(bb.Model);

  TrainCollection = (function(_super) {

    __extends(TrainCollection, _super);

    function TrainCollection() {
      this.updateTrainList = __bind(this.updateTrainList, this);

      this.stop = __bind(this.stop, this);

      this.start = __bind(this.start, this);

      this.cleanup = __bind(this.cleanup, this);

      this.parse = __bind(this.parse, this);

      this.url = __bind(this.url, this);
      return TrainCollection.__super__.constructor.apply(this, arguments);
    }

    TrainCollection.prototype.model = Train;

    TrainCollection.prototype.initialize = function(n, options) {
      if (options !== void 0) {
        if (options.from !== void 0) {
          this.from = options.from;
        }
        if (options.to !== void 0) {
          return this.to = options.to;
        }
      }
    };

    TrainCollection.prototype.url = function() {
      if (this.to !== void 0) {
        return "https://www.riper.fr/api/stif/trains/from/" + this.from + "/to/" + this.to;
      } else {
        return "https://www.riper.fr/api/stif/trains/from/" + this.from;
      }
    };

    TrainCollection.prototype.parse = function(response, xhr) {
      if (xhr.status === 200 && response.status === true) {
        return response.response;
      } else {
        return [];
      }
    };

    TrainCollection.prototype.cleanup = function(ids) {
      var _this = this;
      return this.each(function(train) {
        if (_.indexOf(ids, train.get('id')) === -1) {
          return _this.remove(train);
        }
      });
    };

    TrainCollection.prototype.start = function() {
      if (this.timer) {
        clearInterval(this.timer);
      }
      this.updateTrainList();
      return this.timer = setInterval(this.updateTrainList, 5000);
    };

    TrainCollection.prototype.stop = function() {
      if (this.timer) {
        return clearInterval(this.timer);
      }
    };

    TrainCollection.prototype.updateTrainList = function() {
      var _this = this;
      if (this.working !== true) {
        this.working = true;
        return this.fetch({
          add: true,
          success: function(n, response) {
            var ids;
            _this.working = false;
            ids = _.pluck(response.response, 'id');
            return _this.cleanup(ids);
          },
          error: function(n, reponse) {
            return _this.working = false;
          }
        });
      }
    };

    return TrainCollection;

  })(Backbone.Collection);

  DigitalClock = (function(_super) {

    __extends(DigitalClock, _super);

    function DigitalClock() {
      this.tick = __bind(this.tick, this);

      this.render = __bind(this.render, this);

      this.stop = __bind(this.stop, this);

      this.start = __bind(this.start, this);
      return DigitalClock.__super__.constructor.apply(this, arguments);
    }

    DigitalClock.prototype.template = _.template("<div class=\"hours\">00</div>\n<div class=\"dots dotsHour\">:</div>\n<div class=\"minutes\">00</div>\n<div class=\"dots dotsSeconds\">:</div>\n<div class=\"seconds\">00</div>\n<div class=\"milliseconds\">00</div>\n<div class=\"ampm\">am</div>");

    DigitalClock.prototype.className = "digitalClock";

    DigitalClock.prototype.initialize = function(options) {
      if (!options) {
        options = {};
      }
      this.interval = options.displayMilli ? 10 : 100;
      this.displayMilli = options.displayMilli ? true : false;
      this.display24h = options.display24h ? true : false;
      this.noSeconds = options.noSeconds ? true : false;
      this.$el.addClass(this.className);
      this.render();
      return this.start();
    };

    DigitalClock.prototype.start = function() {
      if (!(this.timer === void 0 || null)) {
        clearInterval(this.timer);
      }
      this.timer = setInterval(this.tick, this.interval);
      return this.tick();
    };

    DigitalClock.prototype.stop = function() {
      if (!(this.timer === void 0 || null)) {
        return clearInterval(this.timer);
      }
    };

    DigitalClock.prototype.render = function() {
      this.$el.html(this.template({}));
      if (this.displayMilli === false) {
        this.$el.addClass('noMilli');
      }
      if (this.display24h === true) {
        this.$el.addClass('display24h');
      }
      if (this.noSeconds === true) {
        this.$el.addClass('noSeconds');
      }
      this.nodes = {
        hours: this.$('.hours'),
        minutes: this.$('.minutes'),
        seconds: this.$('.seconds'),
        milliseconds: this.$('.milliseconds'),
        ampm: this.$('.ampm')
      };
      return this.start();
    };

    DigitalClock.prototype.format = function(number, format) {
      var i, neededZero, result, _i;
      if (format == null) {
        format = 2;
      }
      result = '' + number;
      if (result.length < format) {
        neededZero = format - result.length;
        for (i = _i = 1; 1 <= neededZero ? _i <= neededZero : _i >= neededZero; i = 1 <= neededZero ? ++_i : --_i) {
          result = '0' + result;
        }
        return result;
      } else {
        return result;
      }
    };

    DigitalClock.prototype.tick = function() {
      var date, hours;
      date = new Date();
      if (this.display24h) {
        this.nodes.hours.html(this.format(date.getHours()));
      } else {
        hours = date.getHours();
        this.nodes.hours.html(this.format(hours > 12 ? hours - 12 : hours));
        this.nodes.ampm.html(this.format(hours < 12 ? "am" : "pm"));
      }
      this.nodes.minutes.html(this.format(date.getMinutes()));
      this.nodes.seconds.html(this.format(date.getSeconds()));
      if (this.displayMilli !== false) {
        return this.nodes.milliseconds.html(this.format(date.getMilliseconds(), 3));
      }
    };

    return DigitalClock;

  })(bb.View);

  emptyList = (function(_super) {

    __extends(emptyList, _super);

    function emptyList() {
      this.render = __bind(this.render, this);
      return emptyList.__super__.constructor.apply(this, arguments);
    }

    emptyList.prototype.template = _.template("Please make a selection");

    emptyList.prototype.initialize = function() {
      return this.render();
    };

    emptyList.prototype.render = function() {
      return this.$el.html(this.template({}));
    };

    return emptyList;

  })(bb.View);

  mainView = (function(_super) {

    __extends(mainView, _super);

    function mainView() {
      return mainView.__super__.constructor.apply(this, arguments);
    }

    mainView.prototype.el = $('#mainView');

    mainView.prototype.template = _.template("<div class=\"row-fluid\">\n    <div class=\"span12 selector\"></div>\n</div>\n<div class=\"row-fluid\">\n    <div class=\"span12 list\"></div>\n</div>\n<div class=\"digitalClock\"></div>");

    mainView.prototype.initialize = function(options) {
      if (!(!options && !options.config)) {
        this.config = options.config;
      }
      _.bindAll(this);
      return this.render();
    };

    mainView.prototype.render = function() {
      this.trainList = new trainList();
      this.selector = new selector();
      this.clock = new DigitalClock({
        noSeconds: true,
        display24h: true
      });
      $(this.el).html(this.template({}));
      this.$('.list').append(this.trainList.el);
      this.$('.selector').append(this.selector.el);
      return this.$('.digitalClock').append(this.clock.el);
    };

    return mainView;

  })(bb.View);

  selector = (function(_super) {

    __extends(selector, _super);

    function selector() {
      this.render = __bind(this.render, this);

      this.selectChanged = __bind(this.selectChanged, this);

      this.setTrainFromTo = __bind(this.setTrainFromTo, this);

      this.setTrainTo = __bind(this.setTrainTo, this);

      this.setTrainFrom = __bind(this.setTrainFrom, this);

      this.refreshStations = __bind(this.refreshStations, this);

      this.appendStation = __bind(this.appendStation, this);

      this.connect = __bind(this.connect, this);
      return selector.__super__.constructor.apply(this, arguments);
    }

    selector.prototype.template = _.template("<div class=\"row-fluid selectorLine\">\n    <div class=\"span12 \">\n        <h5>Liste des prochains trains au départ de </h5><select class=\"selectFrom\"></select> <h5>en direction de</h5> <select class=\"selectTo\"></select>\n    </div>\n</div>");

    selector.prototype.initialize = function() {
      this.stations = new StationsCollection();
      this.connect();
      this.render();
      return this.stations.fetch();
    };

    selector.prototype.events = {
      'change select': 'selectChanged'
    };

    selector.prototype.connect = function() {
      if (this.stations) {
        this.stations.unbind('reset', this.refreshStations);
      }
      this.stations.bind('add', this.appendStation);
      return this.stations.bind('reset', this.refreshStations);
    };

    selector.prototype.appendStation = function(Station, collection) {
      var optionFrom, optionTo;
      optionFrom = document.createElement('option');
      optionFrom.innerHTML = Station.get('name');
      optionFrom.value = Station.get('code');
      if (Station.get('code') === this.from) {
        $(optionFrom).attr("selected", "selected");
      }
      this.selectFrom.append(optionFrom);
      optionTo = document.createElement('option');
      optionTo.innerHTML = Station.get('name');
      optionTo.value = Station.get('code');
      if (Station.get('code') === this.to) {
        $(optionTo).attr("selected", "selected");
      }
      return this.selectTo.append(optionTo);
    };

    selector.prototype.refreshStations = function() {
      this.selectFrom.html('<option value="">Selectionez une gare</option>');
      this.selectTo.html('<option value="">Toutes direction</option>');
      return this.stations.each(this.appendStation);
    };

    selector.prototype.setTrainFrom = function(from) {
      this.from = from;
      return this.refreshStations();
    };

    selector.prototype.setTrainTo = function(to) {
      this.to = to;
      return this.refreshStations();
    };

    selector.prototype.setTrainFromTo = function(from, to) {
      this.from = from;
      this.to = to;
      return this.refreshStations();
    };

    selector.prototype.selectChanged = function() {
      if (this.selectFrom.val() === '') {
        return REGISTER.router.navigate('');
      } else if (this.selectTo.val() === '') {
        return REGISTER.router.navigate('trains/from/' + this.selectFrom.val());
      } else {
        return REGISTER.router.navigate('trains/from/' + this.selectFrom.val() + '/to/' + this.selectTo.val());
      }
    };

    selector.prototype.render = function() {
      this.$el.html(this.template({}));
      this.selectFrom = this.$('.selectFrom');
      this.selectTo = this.$('.selectTo');
      return this.refreshStations();
    };

    return selector;

  })(bb.View);

  trainItem = (function(_super) {

    __extends(trainItem, _super);

    function trainItem() {
      this.render = __bind(this.render, this);
      return trainItem.__super__.constructor.apply(this, arguments);
    }

    trainItem.prototype.model = Train;

    trainItem.prototype.nodeName = 'div';

    trainItem.prototype.className = 'row-fluid trainLine';

    trainItem.prototype.template = _.template("<div class=\"span2 trainCode\">{{trainMissionCode}}</div>\n<div class=\"span2 trainMention\">{{trainMention}}&nbsp;</div>\n<div class=\"span1 trainTime\">{{time}}</div>\n<div class=\"span6 trainDestination\">{{trainTerminusName}}</div>");

    trainItem.prototype.initialize = function() {
      this.model.bind("change", this.render);
      return this.render();
    };

    trainItem.prototype.render = function() {
      var obj;
      obj = this.model.toJSON();
      if (obj.trainMention === null) {
        obj.trainMention = "";
      }
      if (obj.trainMention !== '') {
        this.$el.addClass('hasMention');
      } else {
        this.$el.removeClass('hasMention');
      }
      if (obj.trainMention === '' && obj.trainLane) {
        obj.trainMention = obj.trainLane;
      }
      obj.time = obj.trainHour.split(' ')[1];
      this.$el.html(this.template(obj));
      return this;
    };

    return trainItem;

  })(bb.View);

  trainList = (function(_super) {

    __extends(trainList, _super);

    function trainList() {
      this.removeTrain = __bind(this.removeTrain, this);

      this.appendTrain = __bind(this.appendTrain, this);

      this.refresh = __bind(this.refresh, this);
      return trainList.__super__.constructor.apply(this, arguments);
    }

    trainList.prototype.initialize = function() {
      _.bindAll(this);
      this.counter = 0;
      return this.render();
    };

    trainList.prototype.className = "row-fluid trainList";

    trainList.prototype.render = function() {
      var empty,
        _this = this;
      if (this.trainList) {
        $(this.el).append('<div class="span12"></div>');
        return this.trainList.each(function(Train) {
          return _this.appendTrain(Train, _this.trainList);
        });
      } else {
        empty = new emptyList();
        return $(this.el).append(empty.el);
      }
    };

    trainList.prototype.refresh = function() {
      $(this.el).html('');
      return this.render();
    };

    trainList.prototype.setTrainList = function(collection) {
      if (this.trainList) {
        this.trainList.unbind('add', this.appendTrain);
      }
      if (this.trainList) {
        this.trainList.unbind('remove', this.removeTrain);
      }
      if (this.trainList) {
        this.trainList.unbind('reset', this.refresh);
      }
      if (collection !== void 0) {
        this.trainList = collection;
        this.trainList.bind('add', this.appendTrain);
        this.trainList.bind('remove', this.removeTrain);
        return this.trainList.bind('reset', this.refresh);
      } else if (this.trainList) {
        return this.trainList = null;
      }
    };

    trainList.prototype.clearTrainList = function() {
      return this.trainList = null;
    };

    trainList.prototype.appendTrain = function(Train, collection) {
      if (Train.view === void 0) {
        Train.view = new trainItem({
          model: Train
        });
      }
      return $(this.el).find('div').first().append(Train.view.el);
    };

    trainList.prototype.removeTrain = function(Train, collection) {
      return Train.view.remove();
    };

    return trainList;

  })(bb.View);

}).call(this);
